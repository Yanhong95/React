{"ast":null,"code":"var _jsxFileName = \"/Users/CYH/react-app/burger-builder/src/components/Burger/Burger.js\";\nimport React from 'react';\nimport classes from './Burger.css';\nimport BurgerIngredient from './BurgerIngredient/BurgerIngredient';\n\nconst burger = props => {\n  const transformedIngredients = Object.keys(props.ingredients).map(igKey => {\n    return [...Array(props.ingredients[igKey])].map((_, i) => {\n      return React.createElement(BurgerIngredient, {\n        key: igKey + i,\n        type: igKey,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      });\n    });\n  }).reduce((arr, el) => {\n    return arr.concat(el);\n  }, []);\n  console.log(transformedIngredients); // Object.keys 是将对象中所有的key 组成一个数组类似于<cheese, meat, meat>\n  // .map(igKey =>{}) 是将这个数组中所有元素进行同样的处理, 例如全部乘以3\n  // ...Array(3) 复制一个长度为3的空数组\n\n  return React.createElement(\"div\", {\n    className: classes.Burger,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(BurgerIngredient, {\n    type: \"bread-top\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }), transformedIngredients, React.createElement(BurgerIngredient, {\n    type: \"bread-bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }));\n};\n\nexport default burger;","map":{"version":3,"sources":["/Users/CYH/react-app/burger-builder/src/components/Burger/Burger.js"],"names":["React","classes","BurgerIngredient","burger","props","transformedIngredients","Object","keys","ingredients","map","igKey","Array","_","i","reduce","arr","el","concat","console","log","Burger"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,gBAAP,MAA6B,qCAA7B;;AAGA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AACtB,QAAMC,sBAAsB,GAAIC,MAAM,CAACC,IAAP,CAAYH,KAAK,CAACI,WAAlB,EAC3BC,GAD2B,CACvBC,KAAK,IAAI;AACV,WAAO,CAAC,GAAGC,KAAK,CAACP,KAAK,CAACI,WAAN,CAAkBE,KAAlB,CAAD,CAAT,EAAqCD,GAArC,CAAyC,CAACG,CAAD,EAAGC,CAAH,KAAS;AACrD,aAAO,oBAAC,gBAAD;AAAkB,QAAA,GAAG,EAAEH,KAAK,GAACG,CAA7B;AAAgC,QAAA,IAAI,EAAEH,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAFM,CAAP;AAGH,GAL2B,EAM3BI,MAN2B,CAMpB,CAACC,GAAD,EAAKC,EAAL,KAAY;AAChB,WAAOD,GAAG,CAACE,MAAJ,CAAWD,EAAX,CAAP;AACH,GAR2B,EAQ1B,EAR0B,CAAhC;AAUIE,EAAAA,OAAO,CAACC,GAAR,CAAYd,sBAAZ,EAXkB,CAalB;AACA;AACA;;AAEJ,SACI;AAAK,IAAA,SAAS,EAAEJ,OAAO,CAACmB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAE,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEKf,sBAFL,EAGI,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAE,cAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADJ;AAOH,CAxBD;;AA0BA,eAAeF,MAAf","sourcesContent":["import React from 'react';\nimport classes from './Burger.css';\nimport BurgerIngredient from './BurgerIngredient/BurgerIngredient';\n\n\nconst burger = (props) => {\n    const transformedIngredients  = Object.keys(props.ingredients)\n        .map(igKey => {\n            return [...Array(props.ingredients[igKey])].map((_,i) => {\n                return <BurgerIngredient key={igKey+i} type={igKey}/>;\n            });   \n        })\n        .reduce((arr,el) => {\n            return arr.concat(el)\n        },[]);\n\n        console.log(transformedIngredients);\n\n        // Object.keys 是将对象中所有的key 组成一个数组类似于<cheese, meat, meat>\n        // .map(igKey =>{}) 是将这个数组中所有元素进行同样的处理, 例如全部乘以3\n        // ...Array(3) 复制一个长度为3的空数组\n\n    return(\n        <div className={classes.Burger}>\n            <BurgerIngredient type= 'bread-top'/>\n            {transformedIngredients}\n            <BurgerIngredient type= 'bread-bottom'/>\n        </div>\n    );\n};\n\nexport default burger;"]},"metadata":{},"sourceType":"module"}